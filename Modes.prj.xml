<TaskerData sr="" dvi="1" tv="5.8.3">
	<Profile sr="prof114" ve="2">
		<cdate>1543411337077</cdate>
		<clp>true</clp>
		<edate>1555151237860</edate>
		<id>114</id>
		<mid0>115</mid0>
		<nme>ContextChanged</nme>
		<Event sr="con0" ve="2">
			<code>3050</code>
			<pri>0</pri>
			<Str sr="arg0" ve="3">%Modes_Contexts</Str>
			<Str sr="arg1" ve="3"/>
			<Int sr="arg2" val="0"/>
		</Event>
	</Profile>
	<Profile sr="prof128" ve="2">
		<cdate>1544301750876</cdate>
		<clp>true</clp>
		<edate>1566887634576</edate>
		<id>128</id>
		<limit>true</limit>
		<mid0>129</mid0>
		<nme>MediaOverride-Example</nme>
		<Event sr="con0" ve="2">
			<code>3050</code>
			<pri>0</pri>
			<Str sr="arg0" ve="3">%VOLM</Str>
			<Str sr="arg1" ve="3"/>
			<Int sr="arg2" val="0"/>
		</Event>
	</Profile>
	<Profile sr="prof130" ve="2">
		<cdate>1485323611359</cdate>
		<clp>true</clp>
		<edate>1566887649154</edate>
		<id>130</id>
		<limit>true</limit>
		<mid0>137</mid0>
		<mid1>138</mid1>
		<nme>Headphones-Example</nme>
		<State sr="con0" ve="2">
			<code>30</code>
			<Int sr="arg0" val="0"/>
		</State>
	</Profile>
	<Profile sr="prof51" ve="2">
		<cdate>1545541948475</cdate>
		<clp>true</clp>
		<edate>1566887808192</edate>
		<id>51</id>
		<mid0>52</mid0>
		<pri>50</pri>
		<Event sr="con0" ve="2">
			<code>307</code>
			<pri>0</pri>
		</Event>
	</Profile>
	<Profile sr="prof55" ve="2">
		<cdate>1443816148810</cdate>
		<clp>true</clp>
		<edate>1566887657619</edate>
		<id>55</id>
		<limit>true</limit>
		<mid0>56</mid0>
		<mid1>57</mid1>
		<nme>Night-Example</nme>
		<Time sr="con0">
			<fh>23</fh>
			<fm>0</fm>
			<th>7</th>
			<tm>0</tm>
		</Time>
	</Profile>
	<Project sr="proj0" ve="2">
		<cdate>1469483841722</cdate>
		<name>Modes</name>
		<pids>51,128,55,114,130</pids>
		<tids>82,113,18,140,115,57,52,112,13,9,39,129,20,56,137,138,34</tids>
		<Share sr="Share">
			<d>Modes - A contextual settings framework to streamline the process of changing settings based on your current situation.

GitHub page with more details: https://github.com/jhotmann/tasker-phone-modes</d>
			<t>Setup</t>
		</Share>
	</Project>
	<Task sr="task112">
		<cdate>1543115059459</cdate>
		<edate>1552539024869</edate>
		<id>112</id>
		<nme>AddToContext</nme>
		<pri>100</pri>
		<rty>2</rty>
		<stayawake>true</stayawake>
		<Action sr="act0" ve="7">
			<code>129</code>
			<Str sr="arg0" ve="3">let context = global('Modes_Contexts').split(',').filter(c =&gt; c.length &gt; 0);
context.push(local('par1'));
setGlobal('Modes_Contexts', context.join(','));</Str>
			<Str sr="arg1" ve="3"/>
			<Int sr="arg2" val="1"/>
			<Int sr="arg3" val="45"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>12</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_av_playlist_add</nme>
		</Img>
	</Task>
	<Task sr="task113">
		<cdate>1543115059459</cdate>
		<edate>1544545361358</edate>
		<id>113</id>
		<nme>RemoveFromContext</nme>
		<pri>100</pri>
		<rty>2</rty>
		<stayawake>true</stayawake>
		<Action sr="act0" ve="7">
			<code>129</code>
			<Str sr="arg0" ve="3">let context = global('Modes_Contexts').split(',').filter(c =&gt; c.length &gt; 0);
let index = context.indexOf(local('par1'));
if (index &gt; -1) {
  context.splice(index, 1);
  setGlobal('Modes_Contexts', context.join(','));
}</Str>
			<Str sr="arg1" ve="3"/>
			<Int sr="arg2" val="1"/>
			<Int sr="arg3" val="45"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>12</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_av_playlist_play</nme>
		</Img>
	</Task>
	<Task sr="task115">
		<cdate>1543411345625</cdate>
		<edate>1566887896614</edate>
		<id>115</id>
		<nme>ContextChanged</nme>
		<pri>6</pri>
		<rty>1</rty>
		<stayawake>true</stayawake>
		<Action sr="act0" ve="7">
			<code>30</code>
			<Int sr="arg0" val="0"/>
			<Int sr="arg1" val="1"/>
			<Int sr="arg2" val="0"/>
			<Int sr="arg3" val="0"/>
			<Int sr="arg4" val="0"/>
		</Action>
		<Action sr="act1" ve="7">
			<code>129</code>
			<Str sr="arg0" ve="3">let version = '1.3.0';
setGlobal('Modes_Version', version);

let configPath = global('Modes_ConfigPath');
let defaultContext = global('Modes_DefaultContext');
let contexts = global('Modes_Contexts').split(',').filter(c =&gt; { return (c !== '') });
let previousContexts = global('Modes_ActiveContexts').split(',').filter(c =&gt; { return (c !== '') });

// Read config files
let configs = contexts.map(context =&gt; {
  return readConfigFile(context);
});

// Determine which contexts will be activated based upon type and priority
let activeContexts = [];
let primaryContext = configs.filter(c =&gt; { return c.type === 1; }).sort((a, b) =&gt; { return a.priority - b.priority; }).pop() || (defaultContext &amp;&amp; typeof defaultContext === 'string' ? readConfigFile(defaultContext) : { priority: 0 });
let primaryPriority = primaryContext.priority || 0;
activeContexts.push(primaryContext.name);
let secondaryContexts = configs.filter(c =&gt; { return (c.type === 2 &amp;&amp; c.priority &gt;= primaryPriority); }).sort((a, b) =&gt; { return a.priority - b.priority; });
secondaryContexts.forEach(c =&gt; {
  activeContexts.push(c.name);
});

// Determine which contexts are newly active and inactive
let newContexts = missingItems(activeContexts, previousContexts);
let inactivatedContexts = missingItems(previousContexts, activeContexts);

// Perform exit parameters for inactivated contexts
inactivatedContexts.forEach(contextName =&gt; {
  context = readConfigFile(contextName);  
  if (context.exit) {
    if (context.exit.profilesToDisable &amp;&amp; Array.isArray(context.exit.profilesToDisable)) context.exit.profilesToDisable.forEach(prof =&gt; { changeProfileStatus(prof, false); });
    if (context.exit.profilesToEnable &amp;&amp; Array.isArray(context.exit.profilesToEnable)) context.exit.profilesToEnable.forEach(prof =&gt; { changeProfileStatus(prof, true); });
    if (context.exit.tasksToRun &amp;&amp; Array.isArray(context.exit.tasksToRun)) context.exit.tasksToRun.forEach(tsk =&gt; { executeTask(tsk.name, tsk.priority, tsk.param1, tsk.param2); });
  }
});

// Merge active context's settings
let merged = {};
if (primaryContext) {
  Object.keys(primaryContext).forEach(key =&gt; {
    if (['name', 'type', 'priority', 'enter', 'exit'].indexOf(key) === -1 &amp;&amp; primaryContext[key] !== null) merged[key] = primaryContext[key];
  });
}
secondaryContexts.forEach(context =&gt; {
  Object.keys(context).forEach(key =&gt; {
    if (['name', 'type', 'priority', 'enter', 'exit'].indexOf(key) === -1 &amp;&amp; context[key] !== null) merged[key] = context[key];
  });
});

// Change settings according to merged context
if (existsIsType(merged, 'volume_notification', 'int')) notificationVol(merged.volume_notification, false, false);
if (existsIsType(merged, 'volume_media', 'int')) mediaVol(merged.volume_media, false, false);
if (existsIsType(merged, 'dnd', 'string')) performTask('DoNotDisturb', 10, merged.dnd, '');
if (existsIsType(merged, 'location', 'string')) performTask('LocationMode', 10, merged.location, '');
if (existsIsType(merged, 'wifiOn', 'boolean')) setWifi(merged.wifiOn);
if (existsIsType(merged, 'bluetoothOn', 'boolean')) setBT(merged.bluetoothOn);
if (existsIsType(merged, 'airplaneModeOn', 'boolean')) setAirplaneMode(merged.airplaneModeOn);
if (existsIsType(merged, 'screenRotationOn', 'boolean')) performTask('DisplayRotate', 10, merged.screenRotationOn, '');
if (existsIsType(merged, 'displayTimeout', 'int')) displayTimeout(0, merged.displayTimeout, 0);
if (existsIsType(merged, 'displayBrightness', 'int') || existsIsType(merged, 'displayBrightness', 'string')) performTask('DisplayBrightness', 10, merged.displayBrightness, '');
if (existsIsType(merged, 'hapticFeedbackOn', 'boolean')) performTask('TouchVibrations', 10, merged.hapticFeedbackOn, '');
if (existsIsType(merged, 'batterySaverOn', 'boolean')) performTask('BatterySaver', 10, merged.batterySaverOn, '');

// Perform enter parameters for new contexts
configs
  .filter(context =&gt; { return (newContexts.indexOf(context.name) &gt; -1) })
  .forEach(context =&gt; {
    if (context.enter) {
      if (context.enter.profilesToDisable &amp;&amp; Array.isArray(context.enter.profilesToDisable)) context.enter.profilesToDisable.forEach(prof =&gt; { changeProfileStatus(prof, false); });
      if (context.enter.profilesToEnable &amp;&amp; Array.isArray(context.enter.profilesToEnable)) context.enter.profilesToEnable.forEach(prof =&gt; { changeProfileStatus(prof, true); });
      if (context.enter.tasksToRun &amp;&amp; Array.isArray(context.enter.tasksToRun)) context.enter.tasksToRun.forEach(tsk =&gt; { executeTask(tsk.name, tsk.priority, tsk.param1, tsk.param2); });
    }
  });

flash((newContexts.length &gt; 0 ? 'New context(s): ' + newContexts.join(', ') : 'Active Context(s): ' + activeContexts.join(', ')));
setGlobal('Modes_ActiveContexts', activeContexts.join(','));

exit();

// Helper functions
function readConfigFile(configName) {
  let configText = '{}';
  try {
    configText = readFile(configPath + '/' + configName + '.json');
  } catch (error) {
    flash('Error reading configuration file ' + configPath + '/' + configName + '.json');
  }
  let conf = JSON.parse(configText);
  if (!conf.name) conf.name = configName;
  if (!conf.type) conf.type = 1;
  if (!conf.priority) conf.priority = 50;
  // Translate old configuration format
  if (Object.keys(conf).indexOf('volume') &gt; -1) {
    if (conf.volume.media !== null) conf.volume_media = conf.volume.media;
    if (conf.volume.notification !== null) conf.volume_notification = conf.volume.notification;
    if (conf.volume.dnd !== null) conf.dnd = conf.volume.dnd;
    delete conf.volume;
  }
  return conf;
}

function missingItems(arr1, arr2) {
  var missing = arr1.filter(function(item) {
    return arr2.indexOf(item) === -1;
  });
  return missing;
}

function existsIsType(obj, key, type) {
  if (type === 'int') {
    return (Object.keys(obj).indexOf(key) &gt; -1 &amp;&amp; Number.isInteger(obj[key]));
  } else {
    return (Object.keys(obj).indexOf(key) &gt; -1 &amp;&amp; typeof obj[key] === type);
  }
}

function changeProfileStatus(name, on) {
  enableProfile(name, on);
  wait(1000);
}

function executeTask(name, priority, param1, param2) {
  performTask(name, priority, param1, param2);
  wait(500);
}</Str>
			<Str sr="arg1" ve="3"/>
			<Int sr="arg2" val="0"/>
			<Int sr="arg3" val="45"/>
		</Action>
		<Action sr="act2" ve="7">
			<code>548</code>
			<on>false</on>
			<Str sr="arg0" ve="3">%Modes_Version</Str>
			<Int sr="arg1" val="0"/>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_image_photo_filter</nme>
		</Img>
	</Task>
	<Task sr="task129">
		<cdate>1544301755191</cdate>
		<edate>1566887634576</edate>
		<id>129</id>
		<pri>6</pri>
		<rty>1</rty>
		<Action sr="act0" ve="7">
			<code>30</code>
			<Int sr="arg0" val="0"/>
			<Int sr="arg1" val="1"/>
			<Int sr="arg2" val="0"/>
			<Int sr="arg3" val="0"/>
			<Int sr="arg4" val="0"/>
		</Action>
		<Action sr="act1" ve="7">
			<code>129</code>
			<Str sr="arg0" ve="3">let configPath = global('Modes_ConfigPath');

setLocal('configpath', configPath.replace('/sdcard/', ''));</Str>
			<Str sr="arg1" ve="3"/>
			<Int sr="arg2" val="1"/>
			<Int sr="arg3" val="45"/>
		</Action>
		<Action sr="act2" ve="7">
			<code>410</code>
			<Str sr="arg0" ve="3">%configpath/mediaoverride.json</Str>
			<Str sr="arg1" ve="3">{
  "type": 2,
  "priority": 81,
  "volume_media": %VOLM
}</Str>
			<Int sr="arg2" val="0"/>
			<Int sr="arg3" val="0"/>
		</Action>
		<Action sr="act3" ve="7">
			<code>130</code>
			<Str sr="arg0" ve="3">AddToContext</Str>
			<Int sr="arg1">
				<var>%priority</var>
			</Int>
			<Str sr="arg2" ve="3">mediaoverride</Str>
			<Str sr="arg3" ve="3"/>
			<Str sr="arg4" ve="3"/>
			<Int sr="arg5" val="0"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%Modes_Contexts</lhs>
					<op>5</op>
					<rhs>(^|,)mediaoverride(,|$)</rhs>
				</Condition>
			</ConditionList>
		</Action>
	</Task>
	<Task sr="task13">
		<cdate>1469555817040</cdate>
		<edate>1544736509880</edate>
		<id>13</id>
		<nme>DisplayRotate</nme>
		<Action sr="act0" ve="7">
			<code>596</code>
			<Str sr="arg0" ve="3">%par1</Str>
			<Int sr="arg1" val="28"/>
			<Str sr="arg2" ve="3">%rotate</Str>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>12</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act1" ve="7">
			<code>822</code>
			<Int sr="arg0" val="1"/>
			<ConditionList sr="if">
				<bool0>Or</bool0>
				<Condition sr="c0" ve="3">
					<lhs>%rotate</lhs>
					<op>4</op>
					<rhs>true|on</rhs>
				</Condition>
				<Condition sr="c1" ve="3">
					<lhs>%par1</lhs>
					<op>13</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act2" ve="7">
			<code>822</code>
			<Int sr="arg0" val="0"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%rotate</lhs>
					<op>4</op>
					<rhs>false|off</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_device_screen_rotation</nme>
		</Img>
	</Task>
	<Task sr="task137">
		<cdate>1485323616243</cdate>
		<edate>1566887639599</edate>
		<id>137</id>
		<Action sr="act0" ve="7">
			<code>130</code>
			<Str sr="arg0" ve="3">AddToContext</Str>
			<Int sr="arg1">
				<var>%priority</var>
			</Int>
			<Str sr="arg2" ve="3">earbuds</Str>
			<Str sr="arg3" ve="3"/>
			<Str sr="arg4" ve="3"/>
			<Int sr="arg5" val="0"/>
		</Action>
	</Task>
	<Task sr="task138">
		<cdate>1543422275395</cdate>
		<edate>1566887649154</edate>
		<id>138</id>
		<Action sr="act0" ve="7">
			<code>130</code>
			<Str sr="arg0" ve="3">RemoveFromContext</Str>
			<Int sr="arg1">
				<var>%priority</var>
			</Int>
			<Str sr="arg2" ve="3">earbuds</Str>
			<Str sr="arg3" ve="3"/>
			<Str sr="arg4" ve="3"/>
			<Int sr="arg5" val="0"/>
		</Action>
		<Action sr="act1" ve="7">
			<code>130</code>
			<Str sr="arg0" ve="3">RemoveFromContext</Str>
			<Int sr="arg1">
				<var>%priority</var>
			</Int>
			<Str sr="arg2" ve="3">mediaoverride</Str>
			<Str sr="arg3" ve="3"/>
			<Str sr="arg4" ve="3"/>
			<Int sr="arg5" val="0"/>
		</Action>
	</Task>
	<Task sr="task140">
		<cdate>1544453972007</cdate>
		<edate>1566867591339</edate>
		<id>140</id>
		<nme>BatterySaver</nme>
		<Action sr="act0" ve="7">
			<code>596</code>
			<Str sr="arg0" ve="3">%par1</Str>
			<Int sr="arg1" val="28"/>
			<Str sr="arg2" ve="3"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>12</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act1" ve="7">
			<code>175</code>
			<Int sr="arg0" val="0"/>
			<ConditionList sr="if">
				<bool0>Or</bool0>
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>4</op>
					<rhs>false|off</rhs>
				</Condition>
				<Condition sr="c1" ve="3">
					<lhs>%par1</lhs>
					<op>13</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act2" ve="7">
			<code>175</code>
			<Int sr="arg0" val="1"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>4</op>
					<rhs>true|on</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_device_battery_alert</nme>
		</Img>
	</Task>
	<Task sr="task18">
		<cdate>1543968812849</cdate>
		<edate>1544743019057</edate>
		<id>18</id>
		<nme>ConfigCreator</nme>
		<pri>100</pri>
		<rty>2</rty>
		<stayawake>true</stayawake>
		<Action sr="act0" ve="7">
			<code>129</code>
			<on>false</on>
			<Str sr="arg0" ve="3">let configPath = global('Modes_ConfigPath');
if (!configPath) alert('Config path not found, please run Setup task and then re-run this task.');

var name = prompt('What is the name of your configuration?');
if (!name) exit();

setLocal('configpath', configPath.replace('/sdcard/', ''));
setLocal('configname', name + '.json');
exit();</Str>
			<Str sr="arg1" ve="3"/>
			<Int sr="arg2" val="0"/>
			<Int sr="arg3" val="45"/>
		</Action>
		<Action sr="act1" ve="7">
			<code>342</code>
			<on>false</on>
			<Int sr="arg0" val="5"/>
			<Str sr="arg1" ve="3">%configpath/%configname</Str>
			<Str sr="arg2" ve="3">%configexists</Str>
			<Int sr="arg3" val="0"/>
		</Action>
		<Action sr="act2" ve="7">
			<code>417</code>
			<on>false</on>
			<Str sr="arg0" ve="3">%configpath/%configname</Str>
			<Str sr="arg1" ve="3">%configtext</Str>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%configexists</lhs>
					<op>2</op>
					<rhs>true</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act3" ve="7">
			<code>129</code>
			<on>false</on>
			<Str sr="arg0" ve="3">let config = {};

if (local('configexists') === 'true') {
  config = JSON.parse(local('configtext'));
}

let contextType = prompt('What type of context is this?\n(1 for primary, 2 for secondary)', getDefaultValue(config, type, '1'));
config.type = (contextType === '2' ? 2 : 1);

let p = prompt('What is this context\'s priority?\n(Enter a number from 0 to 100)', getDefaultValue(config, 'priority', '50'));
try {
  config.priority = parseInt(p);
} catch (err) {
  config.priority = 50;
}

if (confirm('Do you want to change the notification volume?')) {
  let vol = prompt('What would you like the notification volume set to?\n(Enter a number from 0 to 7)', getDefaultValue(config, 'volume_notification', ''));
  if (Number.isInteger(parseInt(vol))) {
    config.volume_notification = parseInt(vol);
  }
}

if (confirm('Do you want to change the media volume?')) {
  let vol = prompt('What would you like the media volume set to?\n(Enter a number from 0 to 15)', getDefaultValue(config, 'volume_media', ''));
  if (Number.isInteger(parseInt(vol))) {
    config.volume_media = parseInt(vol);
  }
}

if (confirm('Do you want to change the Do Not Disturb mode?')) {
  let dnd = prompt('What would you like the dnd mode set to?\n(all, priority, alarms, or none)', getDefaultValue(config, 'dnd', ''));
  if (dnd &amp;&amp; ['all', 'priority', 'alarms', 'none'].indexOf(dnd) &gt; -1) {
    config.dnd = dnd;
  }
}

if (confirm('Do you want to change the location mode?')) {
  let loc = prompt('What would you like the location mode set to?\n(off, accuracy, battery, or device)', getDefaultValue(config, 'location', ''));
  if (dnd &amp;&amp; ['off', 'accuracy', 'battery', 'device'].indexOf(loc) &gt; -1) {
    config.location = loc;
  }
}

if (confirm('Do you want to change the Wifi status?')) {
  if (confirm('Would you like to turn Wifi on?')) {
    config.wifiOn = true;
  } else {
    config.wifiOn = false;
  }
}

if (confirm('Do you want to change the bluetooth status?')) {
  if (confirm('Would you like to turn bluetooth on?')) {
    config.bluetoothOn = true;
  } else {
    config.bluetoothOn = false;
  }
}

if (confirm('Do you want to change the airplane mode status?')) {
  if (confirm('Would you like to turn airplane mode on?')) {
    config.airplaneModeOn = true;
  } else {
    config.airplaneModeOn = false;
  }
}

if (confirm('Do you want to change the display rotation status?')) {
  if (confirm('Would you like to turn rotation on?')) {
    config.screenRotationOn = true;
  } else {
    config.screenRotationOn = false;
  }
}

if (confirm('Do you want to change the display timeout?')) {
  let min = prompt('What would you like the timeout set to?\n(Enter a number of minutes)', getDefaultValue(config, 'displayTimeout', ''));
  if (Number.isInteger(parseInt(min))) {
    config.displayTimeout = parseInt(min);
  }
}

if (confirm('Do you want to change the display brightness?')) {
  let brightness = prompt('What would you like the brightness to?\n(Enter a number 0 to 255 or auto)', getDefaultValue(config, 'displayBrightness', ''));
  if (Number.isInteger(parseInt(brightness))) {
    config.displayBrightness = parseInt(brightness);
  } else if (brightness === 'auto') {
    config.displayBrightness = 'auto';
  }
}

config.enter = {};
config.exit = {};
config.enter.profilesToDisable = profileEnableDisable(true, false);
config.enter.profilesToEnable = profileEnableDisable(true, true);
config.enter.tasksToRun = tasksToRun(true);
config.exit.profilesToDisable = profileEnableDisable(false, false);
config.exit.profilesToEnable = profileEnableDisable(false, true);
config.exit.tasksToRun = tasksToRun(false);

let jsonout = JSON.stringify(config, null, 2);
setLocal('jsonout', jsonout);
if (confirm('Would you like to save the following configuration as ' + local('configname') + '?\n\n' + jsonout)) {
  setLocal('writefile', '1');
  setLocal('configpath', local('configpath') + '/' + local('configname'));
}
exit();

// Helper functions
function getDefaultValue(conf, propName, defaultValue) {
  return (Object.keys(conf).indexOf(propName) &gt; -1 ? conf[propName] : defaultValue);
}

function profileEnableDisable(enter, enable) {
  if (confirm('When this context is ' + (enter ? 'activated' : 'disactivated') + ', do you want to ' + (enable ? 'enable' : 'disable') + ' any profiles?')) {
    let defaultValue = (config[enter ? 'enter' : 'exit'][enable ? 'profilesToEnable' : 'profilesToDisable'] ? config[enter ? 'enter' : 'exit'][enable ? 'profilesToEnable' : 'profilesToDisable'].join(',') : '');
    let profiles = prompt('Enter the names of the profiles you would like ' + (enable ? 'enabled' : 'disabled') + ' separated by commas', defaultValue);
    if (profiles) {
      return profiles.split(',').map(p =&gt; { return p.trim(); });
    }
  }
  return [];
}

function tasksToRun(enter) {
  let arr = [];
  if (confirm('When this context is ' + (enter ? 'activated' : 'disactivated') + ', do you want to execute any tasks?')) {
    let con = true;
    while (con) {
      let obj = taskQuestions();
      if (obj) arr.push(obj);
      con = confirm('Would you like to add another task?');
    }
  }
  return arr;
}

function taskQuestions() {
  let taskObj = {};
  let taskName = prompt('What is the name of the task you would like to execute?');
  if (taskName) {
    taskObj.name = taskName;
  } else {
    return null;
  }
  let priority = parseInt(prompt('What priority would you like to execute this task with?', '10'));
  if (Number.isInteger(parseInt(priority))) {
    taskObj.priority = parseInt(priority);
  } else {
    taskObj.priority = 10;
  }
  let par1 = prompt('What would you like to pass as parameter 1?\n(Cancel for no parameter 1)');
  if (par1) {
    taskObj.param1 = par1;
  } else {
    taskObj.param1 = '';
  }
  let par2 = prompt('What would you like to pass as parameter 2?\n(Cancel for no parameter 2)');
  if (par2) {
    taskObj.param2 = par2;
  } else {
    taskObj.param2 = '';
  }
  return taskObj;
}</Str>
			<Str sr="arg1" ve="3"/>
			<Int sr="arg2" val="0"/>
			<Int sr="arg3">
				<var>500</var>
			</Int>
		</Action>
		<Action sr="act4" ve="7">
			<code>410</code>
			<on>false</on>
			<Str sr="arg0" ve="3">%configpath</Str>
			<Str sr="arg1" ve="3">%jsonout</Str>
			<Int sr="arg2" val="0"/>
			<Int sr="arg3" val="0"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%writefile</lhs>
					<op>2</op>
					<rhs>1</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act5" ve="7">
			<code>104</code>
			<Str sr="arg0" ve="3">https://rawgit.com/jhotmann/tasker-phone-modes/master/ConfigCreator/ConfigCreator.html</Str>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_action_note_add</nme>
		</Img>
	</Task>
	<Task sr="task20">
		<cdate>1471285453782</cdate>
		<edate>1555151323254</edate>
		<id>20</id>
		<nme>Setup</nme>
		<pri>100</pri>
		<Action sr="act0" ve="7">
			<code>129</code>
			<Str sr="arg0" ve="3">var configPath = global('Modes_ConfigPath');
var path = prompt('What folder will contain your config files? (No trailing slash)', (configPath ? configPath : '/sdcard/Tasker/ModeConfigs'));
if (path != null) {
  setGlobal('Modes_ConfigPath', path);
}

var defaultContext = global('Modes_DefaultContext');
var dc = prompt('What would you like to be the default primary context?', (defaultContext ? defaultContext : ''));
if (dc != null) {
  setGlobal('Modes_DefaultContext', dc);
}

enableProfile('ContextChanged', true);</Str>
			<Str sr="arg1" ve="3"/>
			<Int sr="arg2" val="1"/>
			<Int sr="arg3" val="45"/>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_communication_phonelink_setup</nme>
		</Img>
	</Task>
	<Task sr="task34">
		<cdate>1452598211627</cdate>
		<edate>1544736504833</edate>
		<id>34</id>
		<nme>TouchVibrations</nme>
		<pri>100</pri>
		<Action sr="act0" ve="7">
			<code>596</code>
			<Str sr="arg0" ve="3">%par1</Str>
			<Int sr="arg1" val="28"/>
			<Str sr="arg2" ve="3"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>12</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act1" ve="7">
			<code>235</code>
			<Int sr="arg0" val="2"/>
			<Str sr="arg1" ve="3">haptic_feedback_enabled</Str>
			<Str sr="arg2" ve="3">1</Str>
			<Int sr="arg3" val="0"/>
			<Str sr="arg4" ve="3"/>
			<ConditionList sr="if">
				<bool0>Or</bool0>
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>4</op>
					<rhs>true|on</rhs>
				</Condition>
				<Condition sr="c1" ve="3">
					<lhs>%par1</lhs>
					<op>13</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act2" ve="7">
			<code>235</code>
			<Int sr="arg0" val="2"/>
			<Str sr="arg1" ve="3">haptic_feedback_enabled</Str>
			<Str sr="arg2" ve="3">0</Str>
			<Int sr="arg3" val="0"/>
			<Str sr="arg4" ve="3"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>4</op>
					<rhs>false|off</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_action_touch_app</nme>
		</Img>
	</Task>
	<Task sr="task39">
		<cdate>1469465053041</cdate>
		<edate>1544454256898</edate>
		<id>39</id>
		<nme>LocationMode</nme>
		<Action sr="act0" ve="7">
			<code>596</code>
			<Str sr="arg0" ve="3">%par1</Str>
			<Int sr="arg1" val="28"/>
			<Str sr="arg2" ve="3">%mode</Str>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>12</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act1" ve="7">
			<code>905</code>
			<Int sr="arg0" val="3"/>
			<ConditionList sr="if">
				<bool0>Or</bool0>
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>13</op>
					<rhs></rhs>
				</Condition>
				<Condition sr="c1" ve="3">
					<lhs>%mode</lhs>
					<op>2</op>
					<rhs>accuracy</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act2" ve="7">
			<code>905</code>
			<Int sr="arg0" val="0"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%mode</lhs>
					<op>2</op>
					<rhs>off</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act3" ve="7">
			<code>905</code>
			<Int sr="arg0" val="2"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%mode</lhs>
					<op>2</op>
					<rhs>battery</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act4" ve="7">
			<code>905</code>
			<Int sr="arg0" val="1"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%mode</lhs>
					<op>2</op>
					<rhs>device</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_maps_my_location</nme>
		</Img>
	</Task>
	<Task sr="task52">
		<cdate>1545541953966</cdate>
		<edate>1566887808192</edate>
		<id>52</id>
		<pri>100</pri>
		<Action sr="act0" ve="7">
			<code>549</code>
			<Str sr="arg0" ve="3">%Modes_Contexts</Str>
			<Int sr="arg1" val="0"/>
			<Int sr="arg2" val="0"/>
		</Action>
	</Task>
	<Task sr="task56">
		<cdate>1443816152178</cdate>
		<edate>1566887657619</edate>
		<id>56</id>
		<pri>100</pri>
		<Action sr="act0" ve="7">
			<code>130</code>
			<Str sr="arg0" ve="3">AddToContext</Str>
			<Int sr="arg1">
				<var>%priority</var>
			</Int>
			<Str sr="arg2" ve="3">night</Str>
			<Str sr="arg3" ve="3"/>
			<Str sr="arg4" ve="3"/>
			<Int sr="arg5" val="0"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%Modes_Contexts</lhs>
					<op>5</op>
					<rhs>(^|,)night($|,)</rhs>
				</Condition>
			</ConditionList>
		</Action>
	</Task>
	<Task sr="task57">
		<cdate>1543421571650</cdate>
		<edate>1544048411472</edate>
		<id>57</id>
		<pri>100</pri>
		<Action sr="act0" ve="7">
			<code>130</code>
			<Str sr="arg0" ve="3">RemoveFromContext</Str>
			<Int sr="arg1">
				<var>%priority</var>
			</Int>
			<Str sr="arg2" ve="3">night</Str>
			<Str sr="arg3" ve="3"/>
			<Str sr="arg4" ve="3"/>
			<Int sr="arg5" val="0"/>
		</Action>
	</Task>
	<Task sr="task82">
		<cdate>1544039715157</cdate>
		<edate>1544454235658</edate>
		<id>82</id>
		<nme>DisplayBrightness</nme>
		<pri>100</pri>
		<Action sr="act0" ve="7">
			<code>596</code>
			<Str sr="arg0" ve="3">%par1</Str>
			<Int sr="arg1" val="28"/>
			<Str sr="arg2" ve="3"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>12</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act1" ve="7">
			<code>808</code>
			<Int sr="arg0" val="1"/>
			<ConditionList sr="if">
				<bool0>Or</bool0>
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>2</op>
					<rhs>auto</rhs>
				</Condition>
				<Condition sr="c1" ve="3">
					<lhs>%par1</lhs>
					<op>13</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act2" ve="7">
			<code>808</code>
			<Int sr="arg0" val="0"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>4</op>
					<rhs>^\d+$</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act3" ve="7">
			<code>810</code>
			<Int sr="arg0">
				<var>%par1</var>
			</Int>
			<Int sr="arg1" val="1"/>
			<Int sr="arg2" val="0"/>
			<Int sr="arg3" val="0"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>4</op>
					<rhs>^\d+$</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_image_brightness_6</nme>
		</Img>
	</Task>
	<Task sr="task9">
		<cdate>1469465053041</cdate>
		<edate>1544454252115</edate>
		<id>9</id>
		<nme>DoNotDisturb</nme>
		<Action sr="act0" ve="7">
			<code>596</code>
			<Str sr="arg0" ve="3">%par1</Str>
			<Int sr="arg1" val="28"/>
			<Str sr="arg2" ve="3">%mode</Str>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%par1</lhs>
					<op>12</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act1" ve="7">
			<code>312</code>
			<Int sr="arg0" val="2"/>
			<ConditionList sr="if">
				<bool0>Or</bool0>
				<Condition sr="c0" ve="3">
					<lhs>%mode</lhs>
					<op>2</op>
					<rhs>all</rhs>
				</Condition>
				<Condition sr="c1" ve="3">
					<lhs>%par1</lhs>
					<op>13</op>
					<rhs></rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act2" ve="7">
			<code>312</code>
			<Int sr="arg0" val="1"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%mode</lhs>
					<op>2</op>
					<rhs>priority</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act3" ve="7">
			<code>312</code>
			<Int sr="arg0" val="3"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%mode</lhs>
					<op>2</op>
					<rhs>alarms</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Action sr="act4" ve="7">
			<code>312</code>
			<Int sr="arg0" val="0"/>
			<ConditionList sr="if">
				<Condition sr="c0" ve="3">
					<lhs>%mode</lhs>
					<op>2</op>
					<rhs>none</rhs>
				</Condition>
			</ConditionList>
		</Action>
		<Img sr="icn" ve="2">
			<nme>mw_notification_do_not_disturb_off</nme>
		</Img>
	</Task>
</TaskerData>
